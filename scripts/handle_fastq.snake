#### SC-MSI Snakemake pipeline for use with FASTQ/BAM files ####

# Example command to run #
# snakemake -s handle_fastq.snake ---rerun-incomplete --rerun-triggers mtime --latency-wait 120

#### BEGIN WORKFLOW ####

#import libraries
import pandas as pd

#define config file
configfile: "fastq_config.yaml"

with open(config["sample_list"]) as samples_tmp:
	samples=samples_tmp.read().splitlines()

#read in patient list
with open(config["patient_list"]) as patient_id:
	patients=patient_id.read().splitlines()

#read in patient-sample key
patient_key=pd.read_table(config["patient_key"])


rule all:
	input:
		expand("../summary_stats/{patient}_cluster_stats.tsv",patient=patients),
		expand("../patient_reports/{patient}.html",patient=patients)


rule cellranger:
	input:
	output:
		raw_bam="../cell_ranger_output/{sample_name}/outs/possorted_genome_bam.bam",
		matrix="../cell_ranger_output/{sample_name}/outs/filtered_feature_bc_matrix.h5"
	params:
		cellranger=config["cellranger"],
		ref=config["transcriptome"],
		temp_dir="/data3/hanthony/cell_ranger_output/{sample_name}/",
		final_dir="../cell_ranger_output/{sample_name}/"
	conda:
		 "base"
	shell:
		"""
		if [[ -d {params.temp_dir} ]]
		then
		rm -r {params.temp_dir}
		fi
		if [[ -d {params.final_dir} ]]
		then
		rm -r {params.final_dir}
		fi

		mkdir -p {params.temp_dir}

		{params.cellranger} count --id={wildcards.sample_name} --transcriptome={params.ref} --fastqs=../fastq/ \
		--sample={wildcards.sample_name} --output-dir {params.temp_dir} \
		--localcores {threads}

		mv {params.temp_dir} {params.final_dir}
		"""

rule process_sample:
	input:
		{rules.cellranger.output.matrix}
	output:
		all_barcodes="../pseudobulk_barcodes/{sample_name}/{sample_name}_all_cell_barcodes.tsv",
		just_barcodes="../pseudobulk_barcodes/{sample_name}/just_barcodes.tsv",
		filtered_h5="../filtered_h5/{sample_name}.rds"
	conda:
		"seurat"
	shell:
		"""
		mkdir -p ../pseudobulk_barcodes/{wildcards.sample_name}
		Rscript barcode_generator.R {wildcards.sample_name} 'N'
		if [[ ! -f ../pseudobulk_barcodes/{wildcards.sample_name}/just_barcodes.tsv ]]
		then
		cut -f 1 ../pseudobulk_barcodes/{wildcards.sample_name}/{wildcards.sample_name}_all_cell_barcodes.tsv > \
		../pseudobulk_barcodes/{wildcards.sample_name}/just_barcodes.tsv
		fi
		"""

rule find_cancer:
	input:
		"../filtered_h5/{sample_name}.rds"
	output:
		"../pseudobulk_barcodes/{sample_name}/{sample_name}_cancer_barcodes.tsv",
		"../atomic/{sample_name}.rds"
	conda:
		"atomic"
	shell:
		"""
		Rscript atomic.R {wildcards.sample_name}
		"""

rule sensor_rna:
	input:
		"../filtered_h5/{sample_name}.rds"
	output:
		"../sensor_rna_results/{sample_name}.txt"
	conda:
		"seurat"
	shell:
		"""
		Rscript sensor_rna_shaper.R {wildcards.sample_name}
		training_model=../temp/{wildcards.sample_name}_training_model.csv
		msisensor-rna train -i $training_model -m ../temp/{wildcards.sample_name}.model -t PanCancer
		msisensor-rna detection -i ../temp/{wildcards.sample_name}.csv -o ../sensor_rna_results/{wildcards.sample_name}.txt \
		-m ../temp/{wildcards.sample_name}.model -d True
		"""

def get_list_of_bams(wildcards):
	ck_output = checkpoints.split_bam.get(sample_name=wildcards.sample_name).output[0]
	with open(ck_output) as f:
		bams = [line.strip().replace(".bam","") for line in f]
	return bams


checkpoint split_bam:
	input:
		tumor={rules.cellranger.output.raw_bam},
		barcodes="../pseudobulk_barcodes/{sample_name}/{sample_name}_all_cell_barcodes.tsv"
	output:
		"../temp/{sample_name}_temp_bams.txt"
	resources:
		mem="0G"
	threads: 16
	conda:
		"rusty"
	shell:
		"""
		if [[ ! -d "../bam/{wildcards.sample_name}" ]]
		then
		mkdir ../bam/{wildcards.sample_name}
		fi
		sinto filterbarcodes -b {input.tumor} -c {input.barcodes} \
		--barcodetag "CB" -p {threads} --outdir ../bam/{wildcards.sample_name}/

		find ../bam/{wildcards.sample_name}/*.bam -printf "%f\n" > ../temp/{wildcards.sample_name}_temp_bams.txt
		"""

checkpoint annotate_h5:
	input:
		"../atomic/{sample_name}.rds",
		"../sensor_rna_results/{sample_name}.txt"
	output:
		"../annotated_h5/{sample_name}.rds"
	conda:
		"seurat"
	shell:
		"""
		Rscript annotate_bamog.R {wildcards.sample_name}
		"""

rule create_plots:
	input:
		"../annotated_h5/{sample_name}.rds"
	output:
		"../images/{sample_name}_cell_types.pdf",
		"../images/{sample_name}_msi_plots.pdf"
	conda:
		"seurat"
	shell:
		"""
		Rscript plot_all_bamog.R {wildcards.sample_name}
		"""

rule infercnv:
	input:
		"../annotated_h5/{sample_name}.rds"
	output:
		"/data3/hanthony/infer_cnv_temp/sample_{sample_name}/infercnv.png"
	params:
		outdir="/data3/hanthony/infer_cnv_temp/sample_{sample_name}/"
	threads: 5
	resources:
		mem="30G"
	conda:
		"seurat"
	shell:
		"""
		Rscript infer_cnv.R {wildcards.sample_name} {params.outdir}
		mkdir -p ../images/{wildcards.sample_name}_cnv/
		cp {params.outdir}*.png ../images/{wildcards.sample_name}_cnv/
		"""


def match_patient_samples(wildcards):
	indv_key = patient_key[patient_key['patient_id'].str.contains(wildcards.patient)]
	matched_annotated_samples="../annotated_h5/" +indv_key['filename'].values +".rds"
	return matched_annotated_samples

rule integrate_data:
	input:
		match_patient_samples
	output:
		int_data="../integrated_samples/{patient}.rds",
		canc_data="../integrated_samples/{patient}_cancer.rds"
	threads: 20
	resources:
		mem="0G"
	conda:
		"atomic"
	shell:
		"""
		Rscript integrate_all4.R {wildcards.patient} 'N'
		"""
rule int_msi:
	input:
		{rules.integrate_data.output.int_data}
	output:
		"../sensor_rna_results/int_{patient}.txt"
	shell:
		"""
		training_model=../temp/{wildcards.patient}_training_model.csv
		msisensor-rna train -i $training_model -m ../temp/{wildcards.patient}.model -t PanCancer
		msisensor-rna detection -i ../temp/{wildcards.patient}.csv \
		-o ../sensor_rna_results/int_{wildcards.patient}.txt -m ../temp/{wildcards.patient}.model -d True
		"""

rule canc_int_msi:
	input:
		"../integrated_samples/{patient}_cancer.rds"
	output:
		"../sensor_rna_results/int_{patient}_cancer.txt"
	params:
		p_name="{patient}_cancer"
	shell:
		"""
		training_model=../temp/{params.p_name}_training_model.csv
		msisensor-rna train -i $training_model -m ../temp/{params.p_name}.model -t PanCancer
		msisensor-rna detection -i ../temp/{params.p_name}.csv \
		-o ../sensor_rna_results/int_{params.p_name}.txt -m ../temp/{params.p_name}.model -d True
		"""

rule infercnv_patient:
	input:
		"../integrated_samples/{patient}.rds"
	output:
		"/data3/hanthony/infer_cnv_temp/patient_{patient}/infercnv.png"
	params:
		outdir="/data3/hanthony/infer_cnv_temp/patient_{patient}/"
	threads: 16
	resources:
		mem="0G"
	conda:
		"seurat"
	shell:
		"""
		Rscript infer_patient_cnv.R {wildcards.patient} {params.outdir}
		mkdir -p ../images/{wildcards.patient}_cnv/
		cp {params.outdir}*.png ../images/{wildcards.patient}_cnv/
		"""

rule summary_stats:
	input:
		{rules.infercnv_patient.output},
		{rules.integrate_data.output.int_data}
	output:
		"../summary_stats/{patient}_cluster_stats.tsv"
	resources:
		mem="0G"
	conda:
		"seurat"
	shell:
		"""
		Rscript get_summary_stats2.R {wildcards.patient} "N"
		"""
rule patient_report:
	input:
		"../integrated_samples/{patient}.rds",
		"../integrated_samples/{patient}_cancer.rds",
		{rules.int_msi.output},
		{rules.canc_int_msi.output}
	output:
		"../patient_reports/{patient}.html"
	conda:
		"atomic"
	shell:
		"""
		Rscript patient_report_generator.R {wildcards.patient}
		"""

