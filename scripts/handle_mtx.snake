#### SC-MSI Snakemake pipeline for use with MTX files ####

# Example command to run #
# snakemake -s handle_mtx.snake --cores 1 --use-conda

#### BEGIN WORKFLOW ####

# Import libraries
import pandas as pd

# Define config file
configfile: "mtx_config.yaml"

with open(config["sample_list"]) as samples_tmp:
        samples=samples_tmp.read().splitlines()

# Read in patient list
with open(config["patient_list"]) as patient_id:
        patients=patient_id.read().splitlines()

# Read in patient-sample key
patient_key=pd.read_table(config["patient_key"])

rule all:
	input:
		expand("../reports/{sample_name}_sample_report.pdf",sample_name=samples),
		expand("../infer_cnv_results/sample_{sample_name}/final_infercnv.obj",sample_name=samples),
		expand("../integrated_samples/{patient}.rds",patient=patients)
#		expand("../summary_stats/{patient}_cluster_stats.tsv",patient=patients),
#		expand("../patient_reports/{patient}.html",patient=patients)

rule process_sample:
	input:
	output:
		all_barcodes="../pseudobulk_barcodes/{sample_name}/{sample_name}_all_cell_barcodes.tsv",
		stripped_barcodes="../pseudobulk_barcodes/{sample_name}/just_barcodes.tsv",
		filtered_s_obj="../filtered_h5/{sample_name}.rds"
	params:
		sample_key=config["patient_key"],
		mtx='Y',
		seed=0
	conda:
		 "seurat"
	shell:
		"""
		if [[ ! -d ../pseudobulk_barcodes/{wildcards.sample_name} ]]
		then
		mkdir ../pseudobulk_barcodes/{wildcards.sample_name}
		fi
		Rscript barcode_generator.R {wildcards.sample_name} {params.sample_key} {params.mtx} {params.seed}
		if [[ ! -f ../pseudobulk_barcodes/{wildcards.sample_name}/just_barcodes.tsv ]]
		then
		cut -f 1 ../pseudobulk_barcodes/{wildcards.sample_name}/{wildcards.sample_name}_all_cell_barcodes.tsv > \
		 ../pseudobulk_barcodes/{wildcards.sample_name}/just_barcodes.tsv
		fi
		"""

rule scatomic:
	input:
		"../filtered_h5/{sample_name}.rds"
	output:
		cancer_barcodes="../pseudobulk_barcodes/{sample_name}/{sample_name}_cancer_barcodes.tsv",
		atomic_s_obj="../atomic/{sample_name}.rds"
	params:
		seed=0
	conda:
		"atomic"
	shell:
		"""
		Rscript atomic.R {wildcards.sample_name} {threads} {params.seed}
		"""
rule sensor_rna:
	input:
		"../filtered_h5/{sample_name}.rds"
	output:
		"../sensor_rna_results/{sample_name}.txt"
	conda:
		"seurat"
	shell:
		"""
		Rscript sensor_rna_shaper.R {wildcards.sample_name}
		training_model=../temp/{wildcards.sample_name}_training_model.csv
		msisensor-rna train -i $training_model -m ../temp/{wildcards.sample_name}.model -t PanCancer
		msisensor-rna detection -i ../temp/{wildcards.sample_name}.csv -o ../sensor_rna_results/{wildcards.sample_name}.txt \
		-m ../temp/{wildcards.sample_name}.model -d True
		"""

rule annotate_h5:
	input:
		{rules.scatomic.output.atomic_s_obj},
		{rules.sensor_rna.output},
		{rules.process_sample.output.filtered_s_obj}
	output:
		"../annotated_h5/{sample_name}.rds"
	params:
		msi_cutoff=config["msi_cutoff"],
		key=config["patient_key"]
	conda:
		"seurat"
	shell:
		"""
		Rscript annotate_h5.R {wildcards.sample_name} {params.key} {params.msi_cutoff}
		"""

rule create_plots:
	input:
		{rules.annotate_h5.output}
	output:
		"../reports/{sample_name}_sample_report.pdf"
	conda:
		"seurat"
	shell:
		"""
		Rscript plot_samples.R {wildcards.sample_name}
		"""
rule infercnv:
	input:
		{rules.annotate_h5.output}
	output:
		"../infer_cnv_results/sample_{sample_name}/final_infercnv.obj"
	params:
		outdir="../infer_cnv_results/sample_{sample_name}",
		seed=0
	conda:
		"seurat"
	shell:
		"""
		Rscript infer_cnv.R {wildcards.sample_name} {params.outdir} {params.seed} {threads}
		"""
def match_patient_samples(wildcards):
	indv_key = patient_key[patient_key['patient_id'].str.contains(wildcards.patient)]
	matched_annotated_samples="../annotated_h5/" +indv_key['filename'].values +".rds"
	return matched_annotated_samples

rule integrate_data:
	input:
		match_patient_samples
	output:
		int_data="../integrated_samples/{patient}.rds"
	params:
		seed=0,
		key=config["patient_key"]
	conda:
		"atomic"
	shell:
		"""
		Rscript integrate_samples.R {wildcards.patient} {params.key} {params.seed}
		"""
